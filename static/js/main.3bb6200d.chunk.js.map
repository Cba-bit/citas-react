{"version":3,"sources":["components/Cita.js","components/Formulario.js","App.js","reportWebVitals.js","index.js"],"names":["Cita","cita","eliminarCita","className","mascota","propietario","fecha","hora","sintomas","onClick","id","Formulario","crearCita","useState","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","onSubmit","preventDefault","trim","uuidv4","type","placeholder","onChange","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3bb6200d.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({ cita, eliminarCita }) => (\r\n    <div className='cita'>\r\n        <p>\r\n            Mascota: <span>{cita.mascota}</span>\r\n        </p>\r\n        <p>\r\n            Dueño: <span>{cita.propietario}</span>\r\n        </p>\r\n        <p>\r\n            Fecha: <span>{cita.fecha}</span>\r\n        </p>\r\n        <p>\r\n            Hora: <span>{cita.hora}</span>\r\n        </p>\r\n        <p>\r\n            Sintomas: <span>{cita.sintomas}</span>\r\n        </p>\r\n\r\n        <button className='button eliminar u-full-width' onClick={() => eliminarCita(cita.id)}>\r\n            Eliminar &times;\r\n        </button>\r\n    </div>\r\n);\r\n\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Cita;\r\n","import React, { Fragment, useState } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ({ crearCita }) => {\r\n    // Crear state de Citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: '',\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    const actualizarState = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value,\r\n        });\r\n    };\r\n\r\n    // Extraer los valores\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n    const submitCita = e => {\r\n        e.preventDefault();\r\n\r\n        // Validar\r\n\r\n        if (mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === '') {\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n\r\n        // Eliminar el mensaje previo\r\n        actualizarError(false);\r\n\r\n        // Asignar un ID\r\n        cita.id = uuidv4();\r\n\r\n        // Crear la cita\r\n        crearCita(cita);\r\n\r\n        // Reiniciar el Form\r\n        actualizarCita({ mascota: '', propietario: '', fecha: '', hora: '', sintomas: '' });\r\n    };\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n\r\n            {error ? <p className='alerta-error'>Todos los campos son obligatorios.</p> : null}\r\n\r\n            <form onSubmit={submitCita}>\r\n                <label>Nombre Mascota</label>\r\n                <input type='text' name='mascota' className='u-full-width' placeholder='Nombre Mascota' onChange={actualizarState} value={mascota} />\r\n\r\n                <label>Nombre Dueño</label>\r\n                <input\r\n                    type='text'\r\n                    name='propietario'\r\n                    className='u-full-width'\r\n                    placeholder='Nombre Dueño de la Mascota'\r\n                    onChange={actualizarState}\r\n                    value={propietario}\r\n                />\r\n\r\n                <label>Fecha</label>\r\n                <input type='date' name='fecha' className='u-full-width' onChange={actualizarState} value={fecha} />\r\n\r\n                <label>Hora</label>\r\n                <input type='time' name='hora' className='u-full-width' onChange={actualizarState} value={hora} />\r\n\r\n                <label>Sintomas</label>\r\n                <textarea className='u-full-width' name='sintomas' onChange={actualizarState} value={sintomas}></textarea>\r\n\r\n                <button type='submit' className='u-full-width button-primary'>\r\n                    Agregar Cita\r\n                </button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Formulario;\r\n","import { Fragment, useState, useEffect } from 'react';\nimport Cita from './components/Cita';\nimport Formulario from './components/Formulario';\n\nfunction App() {\n    //Citas en localStorage\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if (!citasIniciales) {\n        citasIniciales = [];\n    }\n\n    // Array de citas\n    const [citas, guardarCitas] = useState(citasIniciales);\n\n    // Use effect para realizar ciertas operaciones cuando el state cambia\n    useEffect(() => {\n        localStorage.setItem('citas', JSON.stringify(citas));\n    }, [citas]);\n\n    const crearCita = cita => {\n        guardarCitas([...citas, cita]);\n    };\n\n    const eliminarCita = id => {\n        const nuevasCitas = citas.filter(cita => cita.id !== id);\n\n        guardarCitas(nuevasCitas);\n    };\n\n    const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\n    return (\n        <Fragment>\n            <h1>Administrador de Pacientes</h1>\n\n            <div className='container'>\n                <div className='row'>\n                    <div className='one-half column'>\n                        <Formulario crearCita={crearCita} />\n                    </div>\n                    <div className='one-half column'>\n                        <h2>{titulo}</h2>\n                        {citas.map(cita => (\n                            <Cita key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </Fragment>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}